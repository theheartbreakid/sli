hibernate.cfg.xml
<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <!-- Database connection settings -->
        <property name="hibernate.connection.driver_class">sun.jdbc.odbc.JdbcOdbcDriver</property>
        <property name="hibernate.connection.url">jdbc:odbc:your_odbc_datasource_name</property>
        <property name="hibernate.dialect">org.hibernate.dialect.SQLServerDialect</property>
        <property name="hibernate.show_sql">true</property>
    </session-factory>
</hibernate-configuration>

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
public class HelloWorld {
    public static void main(String[] args) {
        Configuration configuration = new Configuration().configure();
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.openSession();
        System.out.println("Hello world");
        session.close();
        sessionFactory.close();
    }
}


import java.io.*;
import java.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class ProductDetailsServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            conn = DriverManager.getConnection("jdbc:odbc:your_DSN", "", "");
            String sql = "SELECT ProdCode, PName, Price FROM Products";
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            out.println("<html><head><title>Product Details</title></head><body>");
            out.println("<h2>Product Details</h2>");
            out.println("<table border='1'>");
            out.println("<tr><th>ProdCode</th><th>PName</th><th>Price</th></tr>");
            while (rs.next()) {
                out.println("<tr>");
                out.println("<td>" + rs.getString("ProdCode") + "</td>");
                out.println("<td>" + rs.getString("PName") + "</td>");
                out.println("<td>" + rs.getFloat("Price") + "</td>");
                out.println("</tr>");
            }
            out.println("</table>");
            out.println("</body></html>");
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
            out.println("Error: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            if (out != null) {
                out.close();
            }
        }
    }
}



<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">
    <com.google.android.gms.maps.MapView
        android:id="@+id/map_view"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:clickable="true"
        android:enabled="true" />
    <Button
        android:id="@+id/zoom_in_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Zoom In"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:layout_marginTop="16dp"
        android:layout_marginEnd="16dp"/>
    <Button
        android:id="@+id/zoom_out_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Zoom Out"
        android:layout_below="@id/zoom_in_button"
        android:layout_alignEnd="@id/zoom_in_button"
        android:layout_marginTop="16dp"/>
</RelativeLayout>
package com.app.myapplication;
import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapView;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
public class MainActivity extends AppCompatActivity implements OnMapReadyCallback {
    private static final float DEFAULT_ZOOM = 15f;
    private MapView mapView;
    private GoogleMap googleMap;
    private Button zoomInButton;
    private Button zoomOutButton;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mapView = findViewById(R.id.map_view);
        zoomInButton = findViewById(R.id.zoom_in_button);
        zoomOutButton = findViewById(R.id.zoom_out_button);
        mapView.onCreate(savedInstanceState);
        mapView.getMapAsync(this);
        zoomInButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (googleMap != null) {
                    googleMap.animateCamera(CameraUpdateFactory.zoomIn());
                }
            }
        });
        zoomOutButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (googleMap != null) {
                    googleMap.animateCamera(CameraUpdateFactory.zoomOut());
                }
            }
        });
    }
    @Override
    public void onMapReady(GoogleMap map) {
        googleMap = map;
        if (googleMap != null) {
            googleMap.setMyLocationEnabled(true);
            googleMap.getUiSettings().setMyLocationButtonEnabled(true);
            LatLng latLng = new LatLng(37.7749, -122.4194);
            CameraPosition cameraPosition = new CameraPosition.Builder()
                    .target(latLng)
                    .zoom(DEFAULT_ZOOM)
                    .build();
            googleMap.moveCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));
        }
    }
    @Override
    protected void onResume() {
        super.onResume();
        mapView.onResume();
    }
    @Override
    protected void onStart() {
        super.onStart();
        mapView.onStart();
    }
}



<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">
    <EditText
        android:id="@+id/etGameName"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Game Name"
        android:layout_marginTop="20dp"
        android:layout_marginStart="20dp"
        android:layout_marginEnd="20dp"/>
    <EditText
        android:id="@+id/etGameType"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Game Type"
        android:layout_below="@id/etGameName"
        android:layout_marginTop="20dp"
        android:layout_marginStart="20dp"
        android:layout_marginEnd="20dp"/>
    <EditText
        android:id="@+id/etNoOfPlayers"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Number of Players"
        android:layout_below="@id/etGameType"
        android:layout_marginTop="20dp"
        android:layout_marginStart="20dp"
        android:layout_marginEnd="20dp"/>
    <Button
        android:id="@+id/btnAdd"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Add Data"
        android:layout_below="@id/etNoOfPlayers"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="20dp"/>
    <Button
        android:id="@+id/btnUpdate"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Update Data"
        android:layout_below="@id/btnAdd"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="20dp"/>
    <Button
        android:id="@+id/btnDisplay"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Display Records"
        android:layout_below="@id/btnUpdate"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="20dp"/>
</RelativeLayout>
package com.app.myapplication;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
public class MainActivity extends AppCompatActivity {
    private SQLiteDatabase database;
    private EditText etGameName, etGameType, etNoOfPlayers;
    private Button btnAdd, btnUpdate, btnDisplay;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        database = openOrCreateDatabase("GameDatabase", MODE_PRIVATE, null);
        createGameTable();
        etGameName = findViewById(R.id.etGameName);
        etGameType = findViewById(R.id.etGameType);
        etNoOfPlayers = findViewById(R.id.etNoOfPlayers);
        btnAdd = findViewById(R.id.btnAdd);
        btnUpdate = findViewById(R.id.btnUpdate);
        btnDisplay = findViewById(R.id.btnDisplay);
        btnAdd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                addGameInfo();
            }
        });
        btnUpdate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                updateNoOfPlayers();
            }
        });
        btnDisplay.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                displayRecords();
            }
        });
    }
    private void createGameTable() {
        String createTableQuery = "CREATE TABLE IF NOT EXISTS Game (" +
                "gno INTEGER PRIMARY KEY," +
                "gname TEXT," +
                "type TEXT," +
                "no_of_players INTEGER" +
                ")";
        try {
            database.execSQL(createTableQuery);
            Toast.makeText(this, "Game table created successfully.", Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            e.printStackTrace();
            Toast.makeText(this, "Error creating Game table.", Toast.LENGTH_SHORT).show();
        }
    }
    private void addGameInfo() {
        String gameName = etGameName.getText().toString().trim();
        String gameType = etGameType.getText().toString().trim();
        int noOfPlayers = Integer.parseInt(etNoOfPlayers.getText().toString().trim());
        ContentValues contentValues = new ContentValues();
        contentValues.put("gname", gameName);
        contentValues.put("type", gameType);
        contentValues.put("no_of_players", noOfPlayers);
        long result = database.insert("Game", null, contentValues);
        if (result != -1) {
            Toast.makeText(this, "Game information added successfully.", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "Error adding game information.", Toast.LENGTH_SHORT).show();
        }
    }
    private void updateNoOfPlayers() {
        ContentValues contentValues = new ContentValues();
        contentValues.put("no_of_players", 4);
        int rowsAffected = database.update("Game", contentValues, "gname=?", new String[]{"Badminton"});
        if (rowsAffected > 0) {
            Toast.makeText(this, "Number of players updated successfully.", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "Failed to update number of players.", Toast.LENGTH_SHORT).show();
        }
    }
    private void displayRecords() {
        Cursor cursor = database.rawQuery("SELECT * FROM Game", null);
        if (cursor.moveToFirst()) {
            do {
                int gno = cursor.getInt(cursor.getColumnIndex("gno"));
                String gname = cursor.getString(cursor.getColumnIndex("gname"));
                String type = cursor.getString(cursor.getColumnIndex("type"));
                int no_of_players = cursor.getInt(cursor.getColumnIndex("no_of_players"));
                String record = "GNO: " + gno + ", GName: " + gname + ", Type: " + type + ", Players: " + no_of_players;
                Toast.makeText(this, record, Toast.LENGTH_SHORT).show();
            } while (cursor.moveToNext());
        } else {
            Toast.makeText(this, "No records found.", Toast.LENGTH_SHORT).show();
        }
        cursor.close();
    }
}